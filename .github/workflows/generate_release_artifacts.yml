# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Generate release artifacts

on:
  push:
    branches: [ "releases/**" ]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  # if the commit was done as a tag, use the tag as semver if it is newer than current generated version from tags
  # if the commit was done via the releases/v* branch, use the branch name as semver, assumes work is being done to prepare for release and no tag exists for the branch version yet
  # if a commit is done on the release branch with no semver, generate it based on tags in repo
  versioning:
    runs-on: ubuntu-latest
    outputs:
      artifact-version: ${{ steps.version_artifact_setenv.outputs.version }}
      tag-version: ${{ steps.version_tag_setenv.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate version numbers from existing tags
        id: version_tag_generated
        uses: reecetech/version-increment@2023.10.1
        with:
          scheme: semver
          increment: patch
          
      - name: Parse version from Tag
        id: version_tag
        if: ${{ (github.ref_type == 'tag') }}
        uses: release-kit/semver@v2

      - name: Debug if condition for version_tag_setenv
        run: |
          echo "Tag name from steps.version_tag.outputs.major: ${{steps.version_tag.outputs.major}}"
          echo "Tag name from steps.version_tag.outputs.minor: ${{steps.version_tag.outputs.minor}}"
          echo "Tag name from steps.version_tag.outputs.patch: ${{steps.version_tag.outputs.patch}}"
          echo "Comparison evaluation: $${{ (steps.version_tag.outputs.major > steps.version_tag_generated.outputs.major-version) || (steps.version_tag.outputs.major == steps.version_tag_generated.outputs.major-version && steps.version_tag.outputs.minor > steps.version_tag_generated.outputs.minor-version) || (steps.version_tag.outputs.major == steps.version_tag_generated.outputs.major-version && steps.version_tag.outputs.patch == steps.version_tag_generated.outputs.minor-version && steps.version_tag.outputs.patch >= steps.version_tag_generated.outputs.patch) }}"

      - name: Set version from Tag
        id: version_tag_setenv
        if: $${{ (steps.version_tag.outputs.major > steps.version_tag_generated.outputs.major-version) || (steps.version_tag.outputs.major == steps.version_tag_generated.outputs.major-version && steps.version_tag.outputs.minor > steps.version_tag_generated.outputs.minor-version) || (steps.version_tag.outputs.major == steps.version_tag_generated.outputs.major-version && steps.version_tag.outputs.patch == steps.version_tag_generated.outputs.minor-version && steps.version_tag.outputs.patch >= steps.version_tag_generated.outputs.patch) }}
        run: echo "version=${{ steps.version_tag.outputs.full }}" >> $GITHUB_OUTPUT
        
      - name: Split branch name
        if: ${{ (github.ref_type == 'branch') && startsWith(github.ref_name,'releases/v') }}
        env:
          BRANCH: ${{ github.ref_name }}
        id: version_branch
        run: echo "branch_version=${BRANCH:10}" >> $GITHUB_OUTPUT
        
      - name: Generate version from branch
        if: ${{ steps.version_tag_setenv.outputs.version == 0 && (github.ref_type == 'branch') && startsWith(github.ref_name,'releases/v') }}
        id: version_branch_generate
        uses: HardNorth/github-version-generate@v1.4.0
        with:
          version-source: variable
          version: ${{steps.version_branch.outputs.branch_version}}
          
      - name: Debug if condition for version_artifact_setenv
        run: |
          echo "steps.version_tag_setenv.outputs.version: ${{steps.version_tag_setenv.outputs.version}}"
          echo "Comparison evaluation: $${{(steps.version_tag_setenv.outputs.version != '')}}"
          echo "Tag name from steps.version_tag_generated.outputs.major-version: ${{steps.version_tag_generated.outputs.major-version}}"
          echo "Tag name from steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR: ${{steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR}}"
          echo "Tag name from steps.version_tag_generated.outputs.minor-version: ${{steps.version_tag_generated.outputs.minor-version}}"
          echo "Tag name from steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR: ${{steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR}}"
          echo "Comparison evaluation: ${{ (steps.version_tag_generated.outputs.major-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR) || (steps.version_tag_generated.outputs.minor-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR) }}"
      
      - name: Set env.ARTIFACT_VERSION calculated from releases branch
        if: ${{ (steps.version_tag_setenv.outputs.version != '') && (steps.version_tag_generated.outputs.major-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR) || (steps.version_tag_generated.outputs.minor-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR) }}
        id: version_artifact_setenv
        run: echo "version=${{steps.version_branch_generate.outputs.CURRENT_VERSION}}" >> $GITHUB_OUTPUT
        
      - name: Debug if condition for version_tag_generated_setenv
        run: |
          echo "steps.version_artifact_setenv.outputs.version: ${{steps.version_artifact_setenv.outputs.version}}"
          echo "Comparison evaluation: $${{(steps.version_artifact_setenv.outputs.version != '')}}"
          echo "Tag name from steps.version_tag_generated.outputs.major-version: ${{steps.version_tag_generated.outputs.major-version}}"
          echo "Tag name from steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR: ${{steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR}}"
          echo "Tag name from steps.version_tag_generated.outputs.minor-version: ${{steps.version_tag_generated.outputs.minor-version}}"
          echo "Tag name from steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR: ${{steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR}}"
          echo "Comparison evaluation: ${{ (steps.version_tag_generated.outputs.major-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR) || (steps.version_tag_generated.outputs.minor-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR) }}"

      - name: Set env.TAG_VERSION
        if: ${{ (steps.version_artifact_setenv.outputs.version != '') && (steps.version_tag_generated.outputs.major-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR) || (steps.version_tag_generated.outputs.minor-version != steps.version_branch_generate.outputs.CURRENT_VERSION_MINOR) }}
        id: version_tag_generated_setenv
        run:
          echo "version=${{ steps.version_tag_generated.outputs.current_version}}" >> $GITHUB_OUTPUT

      - name: Debug if condition for version_artifact_tag_setenv
        run: |
          echo "steps.version_tag_generated_setenv.outputs.version: ${{steps.version_tag_generated_setenv.outputs.version}}"
          echo "Comparison evaluation: $${{(steps.version_tag_generated_setenv.outputs.version != '')}}"
     
      - name: Set env.ARTIFACT_VERSION from tag
        if: ${{ steps.version_tag_generated_setenv.outputs.version != '' && github.ref_type == 'tag' }}
        id: version_artifact_tag_setenv
        run: echo "version=${{steps.version_branch_generate.outputs.CURRENT_VERSION}}" >> $GITHUB_OUTPUT
        
#      - name: GitHub Tag Name example
#        run: |
#          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
#          echo "Tag name from github.ref_name: ${{  github.ref_name }}"
#          echo "Version parsed from tags: steps.version_tag_generated.outputs.version = ${{steps.version_tag_generated.outputs.version}}
#          echo "Semver generated env.CURRENT_VERSION: ${{env.CURRENT_VERSION}}
#          echo "Semver generated env.RELEASE_VERSION: ${{env.RELEASE_VERSION}}
#          echo "Semver generated env.NEXT_VERSION: ${{env.NEXT_VERSION}}
#          echo "Semver generated env.NEXT_RELEASE_VERSION: ${{env.NEXT_RELEASE_VERSION}}
#          echo "Semver generated env.TAG_VERSION: ${{env.TAG_VERSION}}
#          echo "Semver generated steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR: ${{steps.version_branch_generate.outputs.CURRENT_VERSION_MAJOR}}

  build:
    #Project uses .NET Framework 4.6.2 which is not in later Github hosted runners
    # See: https://github.com/actions/runner-images/blob/main/images/windows/Windows2019-Readme.md
    runs-on: windows-2019
    needs: [versioning]
    env:
      artifact-version: ${{ needs.versioning.outputs.artifact-version }}
      tag-version: ${{ needs.versioning.outputs.tag-version }}
    permissions: 
      contents: write
    steps:
      - name: Set version from artifact
        if: ${{env.artifact-version != 0}}
        run: echo "version=${{env.artifact-version}}" >> $GITHUB_ENV
      - name: Set version from tag
        if: ${{env.tag-version != 0}}
        run: echo "version=${{env.tag-version}}" >> $GITHUB_ENV
        
      - uses: actions/checkout@v4

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet packages
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build app for release
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} /verbosity:diag

      - name: Create Artifacts
        uses: actions/upload-artifact@v4.3.6
        with:
          name: 'HumbleKeysLibrary_${{env.version}}.pext'
          path: bin/Release/pext/HumbleKeysLibrary.pext
          if-no-files-found: 'error'
          overwrite: 'true'
      
      - name: Download artifact to be added to release
        id: download-artifact
        uses: actions/download-artifact@v4.1.8
        with: 
          name: 'HumbleKeysLibrary_${{env.version}}.pext'
          path: 'artifacts'
      
      - name: Create Draft Release
        uses: softprops/action-gh-release@v2.0.8
        with: 
          name: ${{env.version}}
          body_path: changelog.md
          files: 'artifacts/*'
          draft: true